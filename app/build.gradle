apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'compact.mobile'
        minSdkVersion 16
        versionCode 36
        versionName "sc-1.2.3"
        targetSdkVersion 28
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file('keystorecompactmobile.jks')
            keyAlias = 'CompactMobile'
            storePassword 'alfatrex2018'
            keyPassword 'alfatrex2018'
            // This block should exists, but intentionally left blank.
            // signingConfigs.release parameters will be populated afterEvaluate
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
//            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    // Method to set signingKeys configuration file from external property file
    afterEvaluate { project ->
        def propsFile = rootProject.file('keystore.properties')
        def configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            android.signingConfigs[configName].keyAlias = props['KEY_ALIAS']
            android.signingConfigs[configName].keyPassword = props['KEY_PASS']
            android.signingConfigs[configName].storePassword = props['STORE_PASS']
            android.signingConfigs[configName].storeFile = file(props['STORE_FILE'])
            android.signingConfigs[configName].v1SigningEnabled = true
            android.signingConfigs[configName].v2SigningEnabled = true
        }
    }
    lintOptions {
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    useLibrary 'org.apache.http.legacy'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation files('libs/picasso-2.5.2.jar')
    implementation 'com.google.firebase:firebase-core:17.0.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'com.google.firebase:firebase-perf:18.0.1'
    implementation 'com.google.firebase:firebase-messaging:19.0.1'
    implementation 'com.google.firebase:firebase-database:18.0.1'
    implementation 'com.mcxiaoke.volley:library:1.0.19'
    implementation 'com.google.code.gson:gson:2.8.5'
    testImplementation 'junit:junit:' + rootProject.junitVersion
    testImplementation 'org.mockito:mockito-core:' + rootProject.mockitoVersion
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation 'id.zelory:compressor:2.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    implementation 'com.amazonaws:aws-android-sdk-core:2.6.7'
    implementation 'com.amazonaws:aws-android-sdk-s3:2.3.3'
    implementation 'com.amazonaws:aws-android-sdk-ddb:2.3.3'
    implementation ('com.amazonaws:aws-android-sdk-mobile-client:2.6.7@aar') { transitive = true }
    implementation 'com.journeyapps:zxing-android-embedded:3.6.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
}

apply plugin: 'com.google.gms.google-services'
